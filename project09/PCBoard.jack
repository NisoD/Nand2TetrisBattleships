class PCBoard {
    field Array grid;  // 10x10 game board
    field Array ships; // Array of ship locations
    field int shipsRemaining;

    constructor PCBoard new(int size, int cellSize) {
        let grid = createGrid();
        let ships = Array.new(5);
        let shipsRemaining = 5;
        do placeShipsRandomly();
        return this;
    }

    method Array createGrid() {
        var Array board, row;
        var int i, j;

        let board = Array.new(10);
        let i = 0;
        while (i < 10) {
            let row = Array.new(10);
            let j = 0;
            while (j < 10) {
                let row[j] = 0;
                let j = j + 1;
            }
            let board[i] = row;
            let i = i + 1;
        }
        return board;
    }

    method Array makeShipRecord(int row, int col, int length, int dir) {
        var Array ship;
        let ship = Array.new(4);
        let ship[0] = row;
        let ship[1] = col;
        let ship[2] = length;
        let ship[3] = dir;
        return ship;
    }

    method void placeShipsRandomly() {
        var Array shipLengths;
        var int i, row, col, dir;
        var boolean placed;

        let shipLengths = Array.new(5);
        let shipLengths[0] = 5;  // Carrier
        let shipLengths[1] = 4;  // Battleship
        let shipLengths[2] = 3;  // Cruiser
        let shipLengths[3] = 3;  // Submarine
        let shipLengths[4] = 2;  // Destroyer

        let i = 0;
        while (i < 5) {
            let placed = false;
            while (~placed) {
                let row = Random.randRange(0, 9);
                let col = Random.randRange(0, 9);
                let dir = Random.randRange(0, 1);  // 0: Horizontal, 1: Vertical

                if (canPlaceShip(row, col, shipLengths[i], dir)) {
                    do placeShip(row, col, shipLengths[i], dir);
                    let ships[i] = makeShipRecord(row, col, shipLengths[i], dir);
                    let placed = true;
                }
            }
            let i = i + 1;
        }
        do shipLengths.dispose();
        return;
    }

    method boolean canPlaceShip(int row, int col, int length, int dir) {
        var int i;

        if (dir = 0) {  // horizontal
            if ((col + length) > 10) { return false; }
            let i = 0;
            while (i < length) {
                if (~(getCell(row, col + i) = 0)) { return false; }
                let i = i + 1;
            }
        } else {  // vertical
            if ((row + length) > 10) { return false; }
            let i = 0;
            while (i < length) {
                if (~(getCell(row + i, col) = 0)) { return false; }
                let i = i + 1;
            }
        }
        return true;
    }

    method void placeShip(int row, int col, int length, int dir) {
        var int i;
        let i = 0;
        while (i < length) {
            if (dir = 0) {  // horizontal
                do setCell(row, col + i, 1);
            } else {  // vertical
                do setCell(row + i, col, 1);
            }
            let i = i + 1;
        }
        return;
    }

    method void renderShot(int boardX, int boardY, int row, int col, int result) {
        var int x, y, centerX, centerY;
        // CELL SIZE is 20
        let x = boardX + (col * 20);  
        let y = boardY + (row * 20);
        let centerX = x + 10;  
        let centerY = y + 10;
        
        
        // do Screen.setColor(false); // Worse than drawing it white
        // do Screen.drawRectangle(x + 1, y + 1, x + 19, y + 19);
        
        // Redraw grid lines
        do Screen.setColor(true);
        do Screen.drawLine(x, y, x + 20, y);            // Top 
        do Screen.drawLine(x, y + 20, x + 20, y + 20);  // Bottom 
        do Screen.drawLine(x, y, x, y + 20);            // Left 
        do Screen.drawLine(x + 20, y, x + 20, y + 20);  // Right 
        
        // Draw shot
        if (result = 1) {  // Miss
            do Screen.drawCircle(x+10, y+10, 2);
        }
        if ((result = 2) | (result = 3)) {  // Hit or Sunk (TODO: use this for visual feedback)
            do Screen.drawLine(x + 5, y + 5, x + 15, y + 15);
            do Screen.drawLine(x + 15, y + 5, x + 5, y + 15);
        }
        return;
    }

    method void updateCell(int boardX, int boardY, int row, int col, int result) {
        var int x, y;
        let x = boardX + (col * 20);
        let y = boardY + (row * 20);
    
        do Screen.setColor(true);
        do Screen.drawLine(x, y, x + 20, y);
        do Screen.drawLine(x, y + 20, x + 20, y + 20);
        do Screen.drawLine(x, y, x, y + 20);
        do Screen.drawLine(x + 20, y, x + 20, y + 20);
    
        if (result = 0) {  // Miss
            do Screen.drawCircle(x + 10, y + 10, 3);
        }
        if ((result = 1) | (result = 2)) {  // Hit or Sunk
            do Screen.drawLine(x + 4, y + 4, x + 16, y + 16);
            do Screen.drawLine(x + 16, y + 4, x + 4, y + 16);
        }
        return;
    }

    method void redrawCell(int row, int col, int boardX, int boardY) {
        var int cell;
        var int x, y;
        
        let cell = getCell(row, col);
        let x = boardX + (col * 20);
        let y = boardY + (row * 20);
        
        do Screen.setColor(true);
        if (cell = 2) {  // Miss
            do Screen.drawCircle(x + 10, y + 10, 3);
        }
        if (cell = 3) {  // Hit
            do Screen.drawLine(x + 5, y + 5, x + 15, y + 15);
            do Screen.drawLine(x + 15, y + 5, x + 5, y + 15);
        }
        return;
    }

    method int receiveShot(int row, int col) {
        var int cell;
        let cell = getCell(row, col);

        if (cell = 1) {  // Hit
            do setCell(row, col, 3);
            if (isShipSunk(row, col)) {
                let shipsRemaining = shipsRemaining - 1;
                return 2;  // Sunk
            }
            return 1;  // Hit
        } else {
            if (cell = 0) {  // Miss
                do setCell(row, col, 2);
            }
            return 0;  // Miss
        }
    }

    method boolean isShipSunk(int hitRow, int hitCol) {
        var int i, j, shipRow, shipCol, shipLen, shipDir;
        var Array ship;

        let i = 0;
        while (i < 5) {
            let ship = ships[i];
            let shipRow = ship[0];
            let shipCol = ship[1];
            let shipLen = ship[2];
            let shipDir = ship[3];

            if (shipDir = 0) {  // horizontal
                if ((hitRow = shipRow) &
                    (hitCol > (shipCol - 1)) &
                    (hitCol < (shipCol + shipLen))) {
                    let j = 0;
                    while (j < shipLen) {
                        if (~(getCell(shipRow, shipCol + j) = 3)) {
                            return false;
                        }
                        let j = j + 1;
                    }
                    return true;
                }
            } else {  // vertical
                if ((hitCol = shipCol) &
                    (hitRow > (shipRow - 1)) &
                    (hitRow < (shipRow + shipLen))) {
                    let j = 0;
                    while (j < shipLen) {
                        if (~(getCell(shipRow + j, shipCol) = 3)) {
                            return false;
                        }
                        let j = j + 1;
                    }
                    return true;
                }
            }
            let i = i + 1;
        }
        return false;
    }

    method void drawShipOnly(int x, int y, int row, int col, int length, boolean vertical) {
        do Screen.setColor(true);
        if (vertical) {
            do Screen.drawRectangle(
                x + (col * 20) + 5,
                y + (row * 20) + 5,
                x + (col * 20) + 15,
                y + ((row + length) * 20) - 5
            );
        } else {
            do Screen.drawRectangle(
                x + (col * 20) + 5,
                y + (row * 20) + 5,
                x + ((col + length) * 20) - 5,
                y + (row * 20) + 15
            );
        }
        return;
    }

    method boolean isValidShot(int row, int col) {
        var int cell;
        let cell = getCell(row, col);
        return (cell < 2);  // Valid if not already shot (miss=2 or hit=3)
    }

    method int getCell(int row, int col) {
        var Array rowArray;
        let rowArray = grid[row];
        return rowArray[col];
    }

    method void setCell(int row, int col, int value) {
        var Array rowArray;
        let rowArray = grid[row];
        let rowArray[col] = value;
        return;
    }

    method void draw(int x, int y, boolean showShips) {
        var int i, j, cell;

        do Screen.setColor(true);
        let i = 0;
        while (i < 11) {
            do Screen.drawLine(x, y + (i * 20), x + 200, y + (i * 20));
            do Screen.drawLine(x + (i * 20), y, x + (i * 20), y + 200);
            let i = i + 1;
        }

        let i = 0;
        while (i < 10) {
            let j = 0;
            while (j < 10) {
                let cell = getCell(i, j);
                if ((cell = 1) & showShips) {
                    do Screen.drawRectangle(x + (j * 20) + 5, y + (i * 20) + 5,
                                         x + (j * 20) + 15, y + (i * 20) + 15);
                }
                if (cell = 2) {
                    do Screen.drawCircle(x + (j * 20) + 10, y + (i * 20) + 10, 5);
                }
                if (cell = 3) {
                    do Screen.drawLine(x + (j * 20) + 5, y + (i * 20) + 5,
                                    x + (j * 20) + 15, y + (i * 20) + 15);
                    do Screen.drawLine(x + (j * 20) + 15, y + (i * 20) + 5,
                                    x + (j * 20) + 5, y + (i * 20) + 15);
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    method boolean isGameOver() {
        return shipsRemaining = 0;
    }

    method void dispose() {
        var int i;
        var Array row;

        let i = 0;
        while (i < 10) {
            let row = grid[i];
            do row.dispose();
            let i = i + 1;
        }
        do grid.dispose();

        let i = 0;
        while (i < 5) {
            let row = ships[i];
            do row.dispose();
            let i = i + 1;
        }
        do ships.dispose();

        do Memory.deAlloc(this);
        return;
    }
}