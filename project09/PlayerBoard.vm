function PlayerBoard.new 1
push constant 4
call Memory.alloc 1
pop pointer 0
push argument 0
pop static 0
push argument 1
pop static 1
push pointer 0
call PlayerBoard.createGrid 1
pop this 0
push constant 5
call Array.new 1
pop this 1
push constant 0
pop this 2
push constant 5
pop this 3
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 5
lt
not
if-goto WHILE_END0
push local 0
push this 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function PlayerBoard.createGrid 4
push argument 0
pop pointer 0
push static 0
call Array.new 1
pop local 0
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push static 0
lt
not
if-goto WHILE_END0
push static 0
call Array.new 1
pop local 1
push constant 0
pop local 3
label WHILE_EXP1
push local 3
push static 0
lt
not
if-goto WHILE_END1
push local 3
push local 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP1
label WHILE_END1
push local 2
push local 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function PlayerBoard.getCell 1
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
push argument 1
push static 0
push constant 1
sub
gt
or
push argument 2
push constant 0
lt
or
push argument 2
push static 0
push constant 1
sub
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
return
label IF_FALSE0
push argument 1
push this 0
add
pop pointer 1
push that 0
pop local 0
push argument 2
push local 0
add
pop pointer 1
push that 0
return
function PlayerBoard.setCell 1
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
push argument 1
push static 0
push constant 1
sub
gt
or
push argument 2
push constant 0
lt
or
push argument 2
push static 0
push constant 1
sub
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 1
push this 0
add
pop pointer 1
push that 0
pop local 0
push argument 2
push local 0
add
push argument 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function PlayerBoard.canPlaceShip 1
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
push argument 2
push constant 0
lt
or
push argument 1
push static 0
push constant 1
sub
gt
or
push argument 2
push static 0
push constant 1
sub
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 4
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 2
push argument 3
add
push static 0
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
label IF_FALSE2
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 3
lt
not
if-goto WHILE_END0
push argument 2
push local 0
add
push static 0
push constant 1
sub
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
return
label IF_FALSE3
push pointer 0
push argument 1
push argument 2
push local 0
add
call PlayerBoard.getCell 3
push constant 0
eq
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
return
label IF_FALSE4
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
goto IF_END1
label IF_FALSE1
push argument 1
push argument 3
add
push static 0
gt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
return
label IF_FALSE5
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push argument 3
lt
not
if-goto WHILE_END1
push argument 1
push local 0
add
push static 0
push constant 1
sub
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
return
label IF_FALSE6
push pointer 0
push argument 1
push local 0
add
push argument 2
call PlayerBoard.getCell 3
push constant 0
eq
not
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
return
label IF_FALSE7
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
label IF_END1
push constant 0
not
return
function PlayerBoard.actuallyPlaceShip 1
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
push argument 2
push constant 0
lt
or
push argument 1
push static 0
push constant 1
sub
gt
or
push argument 2
push static 0
push constant 1
sub
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 3
lt
not
if-goto WHILE_END0
push argument 4
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 2
push local 0
add
push static 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push argument 1
push argument 2
push local 0
add
push constant 1
call PlayerBoard.setCell 4
pop temp 0
label IF_FALSE2
goto IF_END1
label IF_FALSE1
push argument 1
push local 0
add
push static 0
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push pointer 0
push argument 1
push local 0
add
push argument 2
push constant 1
call PlayerBoard.setCell 4
pop temp 0
label IF_FALSE3
label IF_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function PlayerBoard.placeShip 2
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
push argument 2
push constant 0
lt
or
push argument 3
push constant 1
lt
or
push this 2
push constant 4
gt
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 4
not
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 1
goto IF_END1
label IF_FALSE1
push constant 1
pop local 1
label IF_END1
push pointer 0
push argument 1
push argument 2
push argument 3
push local 1
call PlayerBoard.canPlaceShip 5
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 4
call Array.new 1
pop local 0
push constant 0
push local 0
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push argument 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 0
add
push argument 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push pointer 0
push argument 1
push argument 2
push argument 3
push local 1
call PlayerBoard.actuallyPlaceShip 5
pop temp 0
push this 2
push this 1
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push this 2
push constant 1
add
pop this 2
push constant 0
not
return
label IF_FALSE2
push constant 0
return
function PlayerBoard.isValidShot 1
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call PlayerBoard.getCell 3
pop local 0
push local 0
push constant 2
lt
return
function PlayerBoard.receiveShot 1
push argument 0
pop pointer 0
push pointer 0
push argument 1
push argument 2
call PlayerBoard.getCell 3
pop local 0
push local 0
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 1
push argument 2
push constant 3
call PlayerBoard.setCell 4
pop temp 0
push pointer 0
push argument 1
push argument 2
call PlayerBoard.isShipSunk 3
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 3
push constant 1
sub
pop this 3
push constant 2
return
label IF_FALSE1
push constant 1
return
goto IF_END0
label IF_FALSE0
push local 0
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push argument 1
push argument 2
push constant 2
call PlayerBoard.setCell 4
pop temp 0
label IF_FALSE2
push constant 0
return
label IF_END0
function PlayerBoard.isShipSunk 7
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 5
lt
not
if-goto WHILE_END0
push local 0
push this 1
add
pop pointer 1
push that 0
pop local 6
push constant 0
push local 6
add
pop pointer 1
push that 0
pop local 2
push constant 1
push local 6
add
pop pointer 1
push that 0
pop local 3
push constant 2
push local 6
add
pop pointer 1
push that 0
pop local 4
push constant 3
push local 6
add
pop pointer 1
push that 0
pop local 5
push local 5
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push local 2
eq
push argument 2
push local 3
push constant 1
sub
gt
and
push argument 2
push local 3
push local 4
add
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push local 4
lt
not
if-goto WHILE_END1
push pointer 0
push local 2
push local 3
push local 1
add
call PlayerBoard.getCell 3
push constant 3
eq
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
label IF_FALSE2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push constant 0
not
return
label IF_FALSE1
goto IF_END0
label IF_FALSE0
push argument 2
push local 3
eq
push argument 1
push local 2
push constant 1
sub
gt
and
push argument 1
push local 2
push local 4
add
lt
and
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop local 1
label WHILE_EXP2
push local 1
push local 4
lt
not
if-goto WHILE_END2
push pointer 0
push local 2
push local 1
add
push local 3
call PlayerBoard.getCell 3
push constant 3
eq
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 0
return
label IF_FALSE4
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP2
label WHILE_END2
push constant 0
not
return
label IF_FALSE3
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function PlayerBoard.updateCell 4
push argument 0
pop pointer 0
push argument 1
push argument 4
push static 1
call Math.multiply 2
add
pop local 0
push argument 2
push argument 3
push static 1
call Math.multiply 2
add
pop local 1
push local 0
push static 1
push constant 2
call Math.divide 2
add
pop local 2
push local 1
push static 1
push constant 2
call Math.divide 2
add
pop local 3
push constant 0
call Screen.setColor 1
pop temp 0
push local 0
push constant 1
add
push local 1
push constant 1
add
push local 0
push static 1
push constant 1
sub
add
push local 1
push static 1
push constant 1
sub
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push local 0
push local 1
push local 0
push static 1
add
push local 1
call Screen.drawLine 4
pop temp 0
push local 0
push local 1
push static 1
add
push local 0
push static 1
add
push local 1
push static 1
add
call Screen.drawLine 4
pop temp 0
push local 0
push local 1
push local 0
push local 1
push static 1
add
call Screen.drawLine 4
pop temp 0
push local 0
push static 1
add
push local 1
push local 0
push static 1
add
push local 1
push static 1
add
call Screen.drawLine 4
pop temp 0
push argument 5
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push local 3
push constant 3
call Screen.drawCircle 3
pop temp 0
label IF_FALSE0
push argument 5
push constant 1
eq
push argument 5
push constant 2
eq
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 5
add
push local 1
push constant 5
add
push local 0
push constant 15
add
push local 1
push constant 15
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 15
add
push local 1
push constant 5
add
push local 0
push constant 5
add
push local 1
push constant 15
add
call Screen.drawLine 4
pop temp 0
label IF_FALSE1
push constant 0
return
function PlayerBoard.drawShip 1
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 5
lt
not
if-goto WHILE_END0
push argument 6
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push argument 4
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 2
push argument 3
push local 0
add
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 1
push argument 4
push static 1
call Math.multiply 2
add
push constant 15
add
push argument 2
push argument 3
push local 0
add
push static 1
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END0
label IF_FALSE0
push argument 1
push argument 4
push local 0
add
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 2
push argument 3
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 1
push argument 4
push local 0
add
push static 1
call Math.multiply 2
add
push constant 15
add
push argument 2
push argument 3
push static 1
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
label IF_END0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function PlayerBoard.draw 3
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push static 0
push constant 1
add
lt
not
if-goto WHILE_END0
push argument 1
push argument 2
push local 0
push static 1
call Math.multiply 2
add
push argument 1
push static 0
push static 1
call Math.multiply 2
add
push argument 2
push local 0
push static 1
call Math.multiply 2
add
call Screen.drawLine 4
pop temp 0
push argument 1
push local 0
push static 1
call Math.multiply 2
add
push argument 2
push argument 1
push local 0
push static 1
call Math.multiply 2
add
push argument 2
push static 0
push static 1
call Math.multiply 2
add
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push static 0
lt
not
if-goto WHILE_END1
push constant 0
pop local 1
label WHILE_EXP2
push local 1
push static 0
lt
not
if-goto WHILE_END2
push pointer 0
push local 0
push local 1
call PlayerBoard.getCell 3
pop local 2
push local 2
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push local 1
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 2
push local 0
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 1
push local 1
push static 1
call Math.multiply 2
add
push constant 15
add
push argument 2
push local 0
push static 1
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE0
push local 2
push constant 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push local 1
push static 1
call Math.multiply 2
add
push constant 10
add
push argument 2
push local 0
push static 1
call Math.multiply 2
add
push constant 10
add
push constant 5
call Screen.drawCircle 3
pop temp 0
label IF_FALSE1
push local 2
push constant 3
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push local 1
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 2
push local 0
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 1
push local 1
push static 1
call Math.multiply 2
add
push constant 15
add
push argument 2
push local 0
push static 1
call Math.multiply 2
add
push constant 15
add
call Screen.drawLine 4
pop temp 0
push argument 1
push local 1
push static 1
call Math.multiply 2
add
push constant 15
add
push argument 2
push local 0
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 1
push local 1
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 2
push local 0
push static 1
call Math.multiply 2
add
push constant 15
add
call Screen.drawLine 4
pop temp 0
label IF_FALSE2
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP2
label WHILE_END2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function PlayerBoard.isGameOver 0
push argument 0
pop pointer 0
push this 3
push constant 0
eq
return
function PlayerBoard.allShipsPlaced 0
push argument 0
pop pointer 0
push this 2
push constant 5
eq
return
function PlayerBoard.redrawCell 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 5
lt
not
if-goto WHILE_END0
push argument 6
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
push argument 3
push local 0
add
push argument 4
call PlayerBoard.getCell 3
pop local 1
goto IF_END0
label IF_FALSE0
push pointer 0
push argument 3
push argument 4
push local 0
add
call PlayerBoard.getCell 3
pop local 1
label IF_END0
push local 1
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 6
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 1
push argument 4
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 2
push argument 3
push local 0
add
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 1
push argument 4
push static 1
call Math.multiply 2
add
push constant 15
add
push argument 2
push argument 3
push local 0
add
push static 1
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
goto IF_END2
label IF_FALSE2
push argument 1
push argument 4
push local 0
add
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 2
push argument 3
push static 1
call Math.multiply 2
add
push constant 5
add
push argument 1
push argument 4
push local 0
add
push static 1
call Math.multiply 2
add
push constant 15
add
push argument 2
push argument 3
push static 1
call Math.multiply 2
add
push constant 15
add
call Screen.drawRectangle 4
pop temp 0
label IF_END2
label IF_FALSE1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function PlayerBoard.dispose 2
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push static 0
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 1
push local 1
call Array.dispose 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push this 0
call Array.dispose 1
pop temp 0
push constant 0
pop local 0
label WHILE_EXP1
push local 0
push constant 5
lt
not
if-goto WHILE_END1
push local 0
push this 1
add
pop pointer 1
push that 0
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push this 1
add
pop pointer 1
push that 0
pop local 1
push local 1
call Array.dispose 1
pop temp 0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push this 1
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
